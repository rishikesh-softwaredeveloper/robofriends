{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SCUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SCUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: console.error\n  }));\n};","map":{"version":3,"sources":["/home/rishikesh/Documents/robofriends/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SCUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error","console"],"mappings":"AAAA,SAAQA,mBAAR,EACIC,sBADJ,EAEIC,uBAFJ,EAGIC,qBAHJ,QAIO,aAJP;AAMA,OAAO,MAAMC,cAAc,GAAEC,IAAD,KAAS;AACjCC,EAAAA,IAAI,EAACN,mBAD4B;AAEjCO,EAAAA,OAAO,EAACF;AAFyB,CAAT,CAArB;AAKP,OAAO,MAAMG,aAAa,GAAEC,QAAD,IAAY;AACnCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAACL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADhB,EAECF,IAFD,CAEMG,IAAI,IAAEL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACJ,uBAAN;AAA+BK,IAAAA,OAAO,EAACO;AAAvC,GAAD,CAFpB,EAGCC,KAHD,CAGOC,KAAK,IAAEP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACH,qBAAN;AAA4BI,IAAAA,OAAO,EAACU,OAAO,CAACD;AAA5C,GAAD,CAHtB;AAIH,CANM","sourcesContent":["import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SCUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField=(text)=>({\n    type:CHANGE_SEARCH_FIELD,\n    payload:text\n})\n\nexport const requestRobots=(dispatch)=>{\n    dispatch({ type:REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SCUCCESS, payload:data}))\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:console.error}))\n}"]},"metadata":{},"sourceType":"module"}